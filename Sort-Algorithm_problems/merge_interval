#!/usr/bin/env python3
"""
Description: Given an array of intervals where intervals[i] = [start_i, end_i],
merge all overlapping intervals, and return an array of the non-overlapping
intervals that cover all the intervals in the input.
Examples:
Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
"""
def merge_sort(intervals):
    """Merge sort implementation for sorting intervals by their start time"""
    if len(intervals) <= 1:
        return intervals
    
    # Split the intervals into two halves
    mid = len(intervals) // 2
    left = merge_sort(intervals[:mid])
    right = merge_sort(intervals[mid:])
    
    # Merge the sorted halves
    return merge(left, right)

def merge(left, right):
    """Merge two sorted lists"""
    result = []
    i = j = 0
    while i < len(left) and j < len(right):
        if left[i][0] <= right[j][0]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1
    
    # Add remaining elements from both halves
    result.extend(left[i:])
    result.extend(right[j:])
    return result

def merge_intervals(intervals):
    """Merge overlapping intervals"""
    if len(intervals) <= 1:
        return intervals

    # Step 1: Sort the intervals using merge sort
    sorted_intervals = merge_sort(intervals)
    print('sorted_intervals:', sorted_intervals)

    # Step 2: Merge overlapping intervals
    result = [sorted_intervals[0]]
    for interval in sorted_intervals[1:]:
        if interval[0] <= result[-1][1]:
            result[-1][1] = max(result[-1][1], interval[1])
        else:
            result.append(interval)
    return result

# Test cases
if __name__ == "__main__":
    intervals1 = [[1, 3], [2, 6], [8, 10], [15, 18]]
    intervals2 = [[1, 4], [4, 5]]
    print("Merged Intervals 1:", merge_intervals(intervals1))
    print("Merged Intervals 2:", merge_intervals(intervals2))

